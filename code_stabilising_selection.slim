// -------------------------------------
// WF Model with Stabilizing Selection
// -------------------------------------
// author: Anil Ori
// date: Dec, 2024

/*
This script produces a forward-in-time simulation model of stabilizing selection on a quantitative polygenic trait across 150K generatons (100K burn-in period + 50K stabilizing selection). It outputs summary statistics on segregating mutations (incl. effect sizes and allele frequencies) and population level characteristics (such as heterozygosity, mean and standard deviation of phenotype), as well as a matrix with mutations counts for each individual. It does not export the full model in order to save time and storage space, but rather leverages SLiM's build-in framework to compute necessary statistics.

Mutations are drawn from either gamma distribution and selection is enacted through a gaussian fitness function. Parameters to set yourself are the multiplication factor of the fitness function (e.g. 1, 10 or 100), the size of the genomic segment (e.g. 1e5), and size of the multiplier for the gamma distribution to set the range of effect sizes.

Parameters:
-The baseline value of the fitness function = 1.0
-The standard deviation of the fitness function = e.g. the SD of the phenotype at start of selection (so in this case at 100K)
-The fraction of causals = 1
-Mutation rate = 2.36e-8
-Recombination rate = 1e-8
-Dominance = 0.5
-the effect size distribution and its parameters (in this case --> gamma with shape and rate paramter)

Default mutation output statistics by SLiM:
(1) the mutationâ€™s id property
(2) the identifier of its mutation type
(3) its position
(4) its selection coefficient (or effect size)
(5) its dominance coefficient
(6) origin subpopulation identifier
(7) origin tick
(8) prevalence.
*/

// -------------------------------------
// 0. Define functions
// -------------------------------------
function (numeric)calculatePRS(float x) {
	// this functions take an allele frequency threshold at which the genetic value for each individual is calculated. x=0 means all mutations are included in the calculations. x=0.5 means only variants with AF > 50%.
	
	//define individuals and mutations
	inds = sim.subpopulations.individuals;
	muts = sim.mutationsOfType(m2);
	
	//get coefficients and frequencies
	coef = sim.mutationsOfType(m2).selectionCoeff;
	freq = sim.subpopulations.individuals.genomes.mutationFrequenciesInGenomes(muts);
	freq_selected = freq > x;
	
	//create vector to store pheno values in
	pheno_partitioned = float(length=length(inds));
	count = 0;
	
	for (ind in inds) {
		//calculate partitioned phenotype value
		temp = sum(ind.genomes.mutationCountsInGenomes(muts)[freq_selected] * coef[freq_selected]);
		
		//store in pheno vector
		pheno_partitioned[count] = temp;
		
		//update count
		count = count + 1;
	}
	return pheno_partitioned;
}
  	
function (ifs)calculateMeanBin(numeric x, [numeric y = 100], [logical scld = F]) {
	// this functions take a vector of numeric values, sorts them by quantiles, and calculates the mean for each quantile.
	inds = sim.subpopulations.individuals;
	
	//sort PRS values and compute mean per quantile of y
	seq1 = c(0, seq(length(inds)/y, length(inds)-1, length(inds)/y));
	seq2 = seq(length(inds)/y, length(inds), length(inds)/y) -1;
	
	if(scld == F){
		meanprs = sapply(0:(y-1), "mean(sort(x)[seq1[applyValue]:seq2[applyValue]]);");
		return meanprs;
	}
	
	if(scld == T){
		//catch if there are all zero's or NAN's
		if(any(isNAN(x)) | all(x == 0.0)){
		return(rep("NA", count = y));
		}
		
		//if not, calculate mean on scaled genetic values
		else
		{
		meanprs = sapply(0:(y-1), "mean(sort(scale(x))	[seq1[applyValue]:seq2[applyValue]]);");
		return meanprs;
		}
	}
}

function (float)scale(numeric x) {
	// this functions take a vector of numeric values and scale them
	
	x_scld = (x - mean(x)) / sd(x);
	
	return(x_scld);
}

// -------------------------------------
// 1. Initialize and set up model
// -------------------------------------
initialize(){
	
	// --------------------------
	// 1.1. parameters that are set by the script
	// --------------------------
	
	if (!exists("Baseline"))
		defineConstant("Baseline", 1.0); // One makes sense since it's the baseline of the individual fitness (lower means stronger differences between phenotypes)
						
	if (!exists("FracCausal"))
		defineConstant("FracCausal", 1); // Frac of mutations that define phenotype (1 assume all mutations are causal)
			
	// --> Output directory
	if (!exists("outdir"))
		defineConstant("outdir", getwd());
		
	// define the type of distribution (this is just used for naming of the outputfiles, which is handy in case you want to investigate different types of generating distributions)
	if (!exists("disttype"))
	defineConstant("disttype", "gammasym"); //stands for --> gamma symmetrical

	// --------------------------
	// parameters submitted through command line	
	// --------------------------
	if (!exists("Factor"))
		defineConstant("Factor", inputFactor); // To multiply to the gaussian fitness function (higher means stronger differences between phenotypes --> in Ori et al. 2024, we used 1x (standard) and 100x (stronger selection))

	if (!exists("GenomeSize"))
		defineConstant("GenomeSize", inputSize); // Size of genomic element (in Ori et al., 2024, we used 500kb --> 1e5)
		
	if (!exists("GenomeSize2"))
		defineConstant("GenomeSize2", asString(asInteger(inputSize/1e3) + "kb")); //this definition is again just for purpose of easier filenaming
		
	if (!exists("gamma_factor"))
		defineConstant("gamma_factor", multiplier); // To multiply the generated effect sizes with --> in Ori et al. 2024, we used a 10x multiplier to generate effect sizes in the range of what we observe in real-data, eg based on GWAS outcomes)

				
	// --------------------------
	// define cycles to collect summary statistics for (density of calculating stats differs over time)
	// --------------------------
	if (!exists("cycles1"))
		defineConstant("cycles1", seq(0,90000,10000)); //collect during burn-in
				
	if (!exists("cycles2"))
		defineConstant("cycles2", seq(99000, 100000, 100)); //collect during selection
		
	if (!exists("cycles3"))
		defineConstant("cycles3", seq(100010, 100090, 10)); //collect during selection
		
	if (!exists("cycles4"))
		defineConstant("cycles4", seq(100100, 101000, 100)); //collect during selection
		
	if (!exists("cycles5"))
		defineConstant("cycles5", seq(102000, 110000, 1000)); //collect during selection

	if (!exists("cycles6"))
		defineConstant("cycles6", seq(120000, 150000, 10000)); //collect during selection
	
	if (!exists("cycleinfo"))
		defineConstant("cycleinfo", c(cycles1, cycles2, cycles3, cycles4, cycles5, cycles6)); //combine cycles

	// -------------------------------------
	// 1b. Initialize genomic element and mutation parameters
	// -------------------------------------

	initializeMutationRate(2.36e-8); //mutation rate from empirical data
	//initializeMutationType("m1", 0.5, "f", 0.0); //fixed select with neutral drift
	initializeMutationType("m2", 0.5, "g", -0.01026, 0.186); //gamma with mean=-0.01026, a=0.186
	
	m2.convertToSubstitution = F;
	m2.color = "red";
	
	// create genomic element with two type of mutations; set causal fraction and genome size
	initializeGenomicElementType("g1", m2 , FracCausal);
	initializeGenomicElement(g1, 0, GenomeSize - 1); //element size in bp
	initializeRecombinationRate(1e-8);
}


// -------------------------------------
// 2. Create population and set up logging
// -------------------------------------
// a. from the start generate a population of 10000 individuals
// b. this population will evolve over 100K generations of neutral selection
// c. followed by 50K generations of stabilizing selection

1 early() {
	defineConstant("simID", getSeed()); // ID for the simulation
	sim.addSubpop("p1", 10000);
	
	filepath0 = paste0(outdir, "/popstats_", disttype, asInteger(gamma_factor), "x_size", GenomeSize2, 	"_frac", asInteger(FracCausal), "_sddata", "_f", asInteger(Factor), "_", simID,   ".txt");
	
	defineConstant("LOG", community.createLogFile(filepath0, logInterval=1000));
	LOG.addCycle();
	LOG.addCustomColumn("number_mut", "sim.countOfMutationsOfType(m2);");
	LOG.addCustomColumn("het_zygosity", "calcHeterozygosity(p1.genomes);");
	LOG.addCustomColumn("pheno_mean", "mean(sim.subpopulations.individuals.sumOfMutationsOfType(m2));");
	LOG.addCustomColumn("pheno_sd", "sd(sim.subpopulations.individuals.sumOfMutationsOfType(m2));");
//	LOG.addCustomColumn("prsfull_quants", "paste(calculateMeanBin(calculatePRS(0.0), scld=F));");
//	LOG.addCustomColumn("prsmaf1_quants", "paste(calculateMeanBin(calculatePRS(0.01), scld=F));");
//	LOG.addCustomColumn("prsfull_scld_quants", "paste(calculateMeanBin(calculatePRS(0.0), scld=T));");
//	LOG.addCustomColumn("prsmaf1_scld_quants", "paste(calculateMeanBin(calculatePRS(0.01), scld=T));");
}

mutation(m2) {
	// make gamma symmetric by multiplying efffect size by either +1 or -1
	dummy=sample(x=c(1,-1),size=1,weights=c(0.5,0.5));
	
	mut.setSelectionCoeff(mut.selectionCoeff * dummy * gamma_factor); //multiply by gamma_factor to change the range of effect sizes
	return T; // proceed with creating the proposed mutation
}

mutationEffect(m2) {
	// QTLs are neutral; fitness effects (defined by select coef) are handled below
	return 1.0; // this represents neutrality. (Remember that a neutral mutation has a selection coefficient of 0.0 but a multiplicative fitness effect of 1.0)
}

// -------------------------------------
// Configure logging parameters
// -------------------------------------
//1:99000 early() {
//	LOG.setLogInterval(logInterval=1000);
//}

99000 late() {
	LOG.setLogInterval(logInterval=100);
}

100000 late() {
	LOG.setLogInterval(logInterval=10);
}

100100 late() {
	LOG.setLogInterval(logInterval=100);
}

101000 late() {
	LOG.setLogInterval(logInterval=1000);
}
	

// -------------------------------------
// 3. Initiate stabilizing selection
// -------------------------------------

//Define the standard deviation of the phenotype distribution ONLY at end of generation 100K (so at start of selection)
100000 late() {

	inds = sim.subpopulations.individuals;
	phenotype = inds.sumOfMutationsOfType(m2);
	
	// Calculate SD from the phenotype distribution from cycle 100K
	if (!exists("SD"))
	defineConstant("SD", sd(phenotype)); // SD for gaussian density function
}

// At end of equilibruim period: set optimum phenotype to mean to implement stabilising selection
100000: late() {
	
	//get additive phenotype and set optimum phenotype
	inds = sim.subpopulations.individuals;
	phenotype = inds.sumOfMutationsOfType(m2);
	
	optPhenotype = mean(phenotype);
	sim.setValue("optPhenotype", optPhenotype);
	
	//by assigning fitness effects into fitnessScaling, we are defining the connection between phenotype and fitness
	inds.fitnessScaling = Baseline + dnorm(sim.getValue("optPhenotype") - phenotype, 0.0, SD) * Factor;
	inds.tagF = phenotype; // allows you to store a value for each individual
}
	
// -------------------------------------
// 4. Collect data and write to file
// -------------------------------------

1:150000 late() {
	simcycle = sim.cycle;
	
	if(any(simcycle == cycleinfo))
	{
	
	//get mutation presence
	mutdata = sapply(sim.mutations, "paste(applyValue.id,	simcycle, 	asString(asInteger(p1.genomes.containsMutations(applyValue))), '\\n');");
	mutdata_path = paste0(outdir, "/mutdata_", simID, ".txt");
	writeFile(mutdata_path, mutdata, append=T);
	
	//get mutation statistics
	filepath1 = paste0(outdir, "/mutstats_", disttype, "_", asInteger(gamma_factor), "x_", GenomeSize2, 	"_frac", asInteger(FracCausal), "_sd1", "_f", asInteger(Factor), "_", simID,   ".txt");
	
		sim.outputMutations(mutations=sim.mutations, filePath=filepath1, append=T);
	}

// if you want to output the full SLiM simulation model	
//	if(any(simcycle == c(100000, 110000)))
//	
//	{
//	// output full file
//	filepath2 = paste0(outdir, "/fulloutput_", disttype, "_size", GenomeSize2, "_frac", asInteger(FracCausal), "_sddata", "_f", asInteger(Factor), "_cycle", simcycle, "_", simID,   ".txt");
//	sim.outputFull(filePath = filepath2); 
//	}	
}

150000 late()
{
	sim.simulationFinished();
}
